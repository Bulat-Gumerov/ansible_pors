- name: ensure a clean tmp (git)
  file:
    state: absent
    path: "{{ splunk_installation.remote_package_temp_path }}/tuned-profile"
  when: "splunk_optimize.install_tuned_git == true and
         splunk_optimize.tuned_git_url is defined"

- name: Download latest tuned profile (git)
  git:
    repo={{ splunk_optimize.tuned_git_url }}
    dest="{{ splunk_installation.remote_package_temp_path }}/tuned-profile"
    version="{{ splunk_optimize.tuned_git_branch }}"
    clone=yes
    update=yes
    force=yes
    accept_hostkey=yes
  when: "splunk_optimize.install_tuned_git == true and
         splunk_optimize.tuned_git_url is defined"

- name: Download latest tuned profile (web-url)
  get_url:
    url: "{{ splunk_optimize.tuned_tgz_url }}"
    dest: "{{ splunk_installation.remote_package_temp_path }}/splunk_tuned.tgz"
    force: yes
  when: "splunk_optimize.install_tuned_tgz == true and
         splunk_optimize.tuned_tgz_url is defined and THISISFORCEDISABLEDATM is defined"

- name: Download latest tuned profile (web-url via git)
  git:
    repo: "{{ splunk_optimize.tuned_tgz_url }}"
    dest: "{{ splunk_installation.remote_package_temp_path }}/splunk_tuned"
    force: yes
  when: "splunk_optimize.install_tuned_tgz == true and
         splunk_optimize.tuned_tgz_url is defined"

- name: Download latest tuned profile (ansible-repo)
  copy: src="{{ splunk_optimize.tuned_ansible_repo }}"
        dest="/{{ splunk_installation.remote_package_temp_path }}/splunk_tuned.tgz"
  when: "splunk_optimize.install_tuned_ansible == true and
         splunk_optimize.tuned_ansible_repo is defined"

- name: Clean previous tuned profile
  file:
    state: absent
    path: "{{ splunk_optimize.tuned_path }}"

- name: Install tuned profile (git)
  copy: 
    force: yes
    remote_src: yes
    src: "{{ splunk_installation.remote_package_temp_path }}/tuned-profile/etc_tuned/"
    dest: "{{ splunk_optimize.tuned_path }}"
  when: splunk_optimize.install_tuned_git == true 

#- name: Install tuned profile from git
#  shell: "cp -a {{ splunk_installation.remote_package_temp_path }}/tuned-profile/etc_tuned /etc/tuned/splunk"
#  when: splunk_optimize.install_tuned_git == true 

- name: Extract tuned profile from tgz (web-url/ansible-repo)
  unarchive: src="{{ splunk_installation.remote_package_temp_path }}/splunk_tuned.tgz"
             dest="{{ splunk_installation.remote_package_temp_path }}/"
             copy=no
  when: "(splunk_optimize.install_tuned_tgz == true and
         splunk_optimize.tuned_tgz_url is defined) or
        (splunk_optimize.install_tuned_ansible == true and
         splunk_optimize.tuned_ansible_repo is defined)"

- name: Install tuned profile from tgz (web-url/ansible-repo)
  shell: "cp -a {{ splunk_installation.remote_package_temp_path }}/tuned*/etc_tuned {{ splunk_optimize.tuned_path }}"
  when: "(splunk_optimize.install_tuned_tgz == true and
         splunk_optimize.tuned_tgz_url is defined) or
        (splunk_optimize.install_tuned_ansible == true and
         splunk_optimize.tuned_ansible_repo is defined)"

- name: Enable tuned
  service:
    name: tuned
    enabled: yes
    state: started
  when: splunk_optimize.tuned is defined and splunk_optimize.tuned is defined == True 
 
- name: (Re)start tuned
  service:
        name: tuned
        state: restarted

- name: Activate tuned profile
  shell: "tuned-adm profile {{ tuned_name }}"
  when: "(splunk_optimize.install_tuned_tgz == true and
         splunk_optimize.tuned_tgz_url is defined) or
        (splunk_optimize.install_tuned_ansible == true and
         splunk_optimize.tuned_ansible_repo is defined) or
        (splunk_optimize.install_tuned_git == true and
         splunk_optimize.tuned_git_url is defined)"

# put some delay before verifying otherwise it will FAIL
#- name: Verify tuned profile
#  shell: "sleep 3; tuned-adm verify"
#  when: tuned_version > 2100

